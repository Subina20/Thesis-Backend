{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4d53c796",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\n",
      "  {\n",
      "    \"product_name\": \"Gokujyun Hyaluronic Acid Lotion\",\n",
      "    \"brand\": \"Hada Labo\"\n",
      "  },\n",
      "  {\n",
      "    \"product_name\": \"Oil Control Mattifier SPF 45\",\n",
      "    \"brand\": \"Murad\"\n",
      "  },\n",
      "  {\n",
      "    \"product_name\": \"Gokujyun Hyaluronic Acid Lotion\",\n",
      "    \"brand\": \"Hada Labo\"\n",
      "  },\n",
      "  {\n",
      "    \"product_name\": \"Hyaluronic Acid\",\n",
      "    \"brand\": \"The Inkey List\"\n",
      "  },\n",
      "  {\n",
      "    \"product_name\": \"Rose & Hyaluronic Acid Deep Hydration Toner\",\n",
      "    \"brand\": \"Fresh\"\n",
      "  }\n",
      "]\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "import pandas as pd\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.metrics.pairwise import linear_kernel\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Load the preprocessed dataset (replace 'custom_data.csv' with the actual filename)\n",
    "df = pd.read_csv('custom_data.csv', encoding='ISO-8859-1')\n",
    "\n",
    "# Drop rows with missing values\n",
    "df.dropna(inplace=True)\n",
    "\n",
    "# Create dictionaries to map string labels to integer codes for skin type and acne type\n",
    "skin_type_mapping = {\n",
    "    'combination': 1,\n",
    "    'oily': 2,\n",
    "    'dry': 3,\n",
    "    'sensitive': 4\n",
    "}\n",
    "\n",
    "acne_type_mapping = {\n",
    "    'inflammatory': 1,\n",
    "    'comedonal': 2,\n",
    "    'cystic': 3,\n",
    "    'nodular': 4\n",
    "}\n",
    "\n",
    "# Encode categorical variables\n",
    "categorical_cols = ['skin_type', 'acne_type', 'brand']\n",
    "label_encoders = {}\n",
    "\n",
    "for col in categorical_cols:\n",
    "    le = LabelEncoder()\n",
    "    df[col] = le.fit_transform(df[col])\n",
    "    label_encoders[col] = le\n",
    "    \n",
    "# Content-Based Filtering Model Training\n",
    "# Step 1: Create TF-IDF vectors for the 'name' and 'ingredients' features\n",
    "vectorizer = TfidfVectorizer(stop_words='english', ngram_range=(1, 2))\n",
    "tfidf_matrix = vectorizer.fit_transform(df['name'] + ' ' + df['ingredients'])\n",
    "\n",
    "# Step 2: Calculate cosine similarity between the 'name' and 'ingredients' vectors\n",
    "cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\n",
    "\n",
    "# Function to get top N similar items based on content similarity\n",
    "def get_top_similar_indices(indices, N=5):\n",
    "    # Sort the indices based on similarity scores\n",
    "    similar_indices = indices.argsort()[::-1]\n",
    "    # Return top N similar indices\n",
    "    return similar_indices[1:N+1]\n",
    "\n",
    "# Function to get skin care product recommendations along with their brands based on user input\n",
    "def get_skin_care_recommendations(age_str, skin_type_str, acne_type_str, N=5):\n",
    "    try:\n",
    "        # Convert string age input to an integer\n",
    "        age = int(age_str)\n",
    "    except ValueError:\n",
    "        return None, None  # Return None if the age input is not a valid integer\n",
    "    \n",
    "    # Check if the user's age is within the valid range based on the dataset\n",
    "    min_age = df['age'].min()\n",
    "    max_age = df['age'].max()\n",
    "    if age < min_age or age > max_age:\n",
    "        return None, None\n",
    "    \n",
    "    skin_type = skin_type_mapping.get(skin_type_str.lower())\n",
    "    acne_type = acne_type_mapping.get(acne_type_str.lower())\n",
    "    \n",
    "    if skin_type is None or acne_type is None:\n",
    "        return None, None  # If the provided skin type or acne type is not valid, return None\n",
    "    \n",
    "    # Filter products based on user-provided age, skin type, and acne type\n",
    "    filtered_products = df[(df['age'] <= age) & (df['skin_type'] == skin_type) & (df['acne_type'] == acne_type)]\n",
    "    \n",
    "    if filtered_products.empty:\n",
    "        return None, None  # If no products match the criteria, return None\n",
    "    \n",
    "    # Get the indices of filtered products\n",
    "    product_indices = filtered_products.index\n",
    "    \n",
    "    # Calculate average similarity scores for each product\n",
    "    product_sim_scores = cosine_sim[product_indices].mean(axis=0)\n",
    "    \n",
    "    # Get the top N similar products\n",
    "    top_similar_indices = get_top_similar_indices(product_sim_scores, N)\n",
    "    \n",
    "    # Get the top N recommended product names\n",
    "    top_product_names = df['name'].iloc[top_similar_indices].values\n",
    "    \n",
    "    # Get the brand indices for the top N recommended products\n",
    "    top_brand_indices = df['brand'].iloc[top_similar_indices].values\n",
    "    \n",
    "    # Get the brand names based on the brand indices\n",
    "    brand_mapping = {i: label_encoders['brand'].inverse_transform([i])[0] for i in top_brand_indices}\n",
    "    top_brands = [brand_mapping[i] for i in top_brand_indices]\n",
    "    \n",
    "    return top_product_names, top_brands\n",
    "\n",
    "# Example usage of the recommendation system with user input from Flutter\n",
    "# The inputs from Flutter will be in string format, so we pass them accordingly.\n",
    "user_age_str = '30'  # Replace with user-provided age from Flutter\n",
    "user_skin_type_str = \"oily\"  # Replace with user-provided skin type from Flutter\n",
    "user_acne_type_str = \"cystic\"  # Replace with user-provided acne type from Flutter\n",
    "num_recommendations = 5\n",
    "\n",
    "product_recommendations, product_brands = get_skin_care_recommendations(user_age_str, user_skin_type_str, user_acne_type_str, num_recommendations)\n",
    "\n",
    "if product_recommendations is not None:\n",
    "    # Convert the results to a list of dictionaries\n",
    "    results = []\n",
    "    for product_name, brand in zip(product_recommendations, product_brands):\n",
    "        result_dict = {\n",
    "            \"product_name\": product_name,\n",
    "            \"brand\": brand\n",
    "        }\n",
    "        results.append(result_dict)\n",
    "        \n",
    "    # Convert the results to JSON format and print it\n",
    "    json_results = json.dumps(results, indent=2)\n",
    "    print(json_results)\n",
    "else:\n",
    "    print(\"No matching products found based on the provided criteria.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a881bc9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
